From 3cd7128052c0c0e691b936523ac211ca8acd9b85 Mon Sep 17 00:00:00 2001
From: Vito Caputo <vito.caputo@coreos.com>
Date: Mon, 16 Mar 2015 15:10:15 -0700
Subject: [PATCH 2/3] nspawn: add --keep-fd support

This enables inheriting a file from the executing process which persists
for the duration of the nspawn parent process.  Useful in implementing a
robust lifecycle reference tied to the nspawn container, which when
combined with advisory locking can also provide a simple event mechanism
triggered at container exit.
---
 src/nspawn/nspawn.c | 46 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index f1e5c0d..0277a12 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -153,6 +153,7 @@ static bool arg_quiet = false;
 static bool arg_share_system = false;
 static bool arg_register = true;
 static bool arg_keep_unit = false;
+static int arg_keep_fd = -1;
 static char **arg_network_interfaces = NULL;
 static char **arg_network_macvlan = NULL;
 static bool arg_network_veth = false;
@@ -207,7 +208,8 @@ static int help(void) {
                "     --share-system         Share system namespaces with host\n"
                "     --register=BOOLEAN     Register container as machine\n"
                "     --keep-unit            Do not register a scope for the machine, reuse\n"
-               "                            the service unit nspawn is running in\n",
+               "                            the service unit nspawn is running in\n"
+               "     --keep-fd=FDNUM        Do not close the specified file descriptor\n",
                program_invocation_short_name);
 
         return 0;
@@ -230,6 +232,7 @@ static int parse_argv(int argc, char *argv[]) {
                 ARG_SHARE_SYSTEM,
                 ARG_REGISTER,
                 ARG_KEEP_UNIT,
+                ARG_KEEP_FD,
                 ARG_NETWORK_INTERFACE,
                 ARG_NETWORK_MACVLAN,
                 ARG_NETWORK_VETH,
@@ -261,6 +264,7 @@ static int parse_argv(int argc, char *argv[]) {
                 { "share-system",          no_argument,       NULL, ARG_SHARE_SYSTEM      },
                 { "register",              required_argument, NULL, ARG_REGISTER          },
                 { "keep-unit",             no_argument,       NULL, ARG_KEEP_UNIT         },
+                { "keep-fd",               required_argument, NULL, ARG_KEEP_FD           },
                 { "network-interface",     required_argument, NULL, ARG_NETWORK_INTERFACE },
                 { "network-macvlan",       required_argument, NULL, ARG_NETWORK_MACVLAN   },
                 { "network-veth",          no_argument,       NULL, ARG_NETWORK_VETH      },
@@ -549,6 +553,14 @@ static int parse_argv(int argc, char *argv[]) {
                         arg_keep_unit = true;
                         break;
 
+                case ARG_KEEP_FD:
+                        r = safe_atoi(optarg, &arg_keep_fd);
+                        if (r < 0) {
+                                log_error("Failed to parse --keep-fd= argument: %s", optarg);
+                                return r;
+                        }
+                        break;
+
                 case ARG_PERSONALITY:
 
                         arg_personality = personality_from_string(optarg);
@@ -2823,9 +2835,41 @@ int main(int argc, char *argv[]) {
                         goto finish;
                 }
         }
+
+        /* if we're keeping an fd open add it to the listen fds set temporarily across fdset_close_others() */
+        if (arg_keep_fd >= 0) {
+                if (!fds) {
+                        fds = fdset_new();
+                        if (!fds) {
+                                r = log_oom();
+                                goto finish;
+                        }
+                }
+                k = fdset_put(fds, arg_keep_fd);
+                if (k < 0) {
+                        log_error("Failed to add kept fd: %s", strerror(-k));
+                        goto finish;
+                }
+        }
+
         fdset_close_others(fds);
         log_open();
 
+        if (arg_keep_fd >= 0) {
+                k = fdset_remove(fds, arg_keep_fd);
+                if (k < 0) {
+                        log_error("Failed to remove kept fd: %s", strerror(-k));
+                        goto finish;
+                }
+
+                /* ensure the kept fd is closed in the child, only the parent keeps it around. */
+                k = fd_cloexec(arg_keep_fd, true);
+                if (k < 0) {
+                        log_error("Failed to set cloexec on kept fd: %s", strerror(-k));
+                        goto finish;
+                }
+        }
+
         if (arg_directory) {
                 if (path_equal(arg_directory, "/")) {
                         log_error("Spawning container on root directory not supported.");
-- 
2.1.4

